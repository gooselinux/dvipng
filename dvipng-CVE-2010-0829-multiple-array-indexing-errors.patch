diff -up dvipng-1.11/draw.c.CVE-2010-0829 dvipng-1.11/draw.c
--- dvipng-1.11/draw.c.CVE-2010-0829	2008-05-05 22:54:51.000000000 +0200
+++ dvipng-1.11/draw.c	2010-04-27 13:57:43.642227514 +0200
@@ -80,8 +80,15 @@ dviunits SetChar(int32_t c)
   if (currentfont==NULL) 
     Fatal("faulty DVI, trying to set character from null font");
 
-  if (c>=0 && c<=LASTFNTCHAR) 
-    ptr = currentfont->chr[c];
+  if (c<0 || c>LASTFNTCHAR) {
+    Warning("glyph index out of range (%d), skipping",c);
+    return(0);
+  }
+  ptr=currentfont->chr[c];
+  if (ptr==NULL) {
+    Warning("unable to draw glyph %d, skipping",c);
+    return(0);
+  }
 #ifdef DEBUG
   switch (currentfont->type) {
   case FONT_TYPE_VF: DEBUG_PRINT(DEBUG_DVI,("\n  VF CHAR:\t")); break;
@@ -90,13 +97,13 @@ dviunits SetChar(int32_t c)
   case FONT_TYPE_FT: DEBUG_PRINT(DEBUG_DVI,("\n  FT CHAR:\t")); break;
   default: DEBUG_PRINT(DEBUG_DVI,("\n  NO CHAR:\t"))
   }
-  if (isprint(c))
+  if (debug & DEBUG_DVI && c>=0 && c<=UCHAR_MAX && isprint(c))
     DEBUG_PRINT(DEBUG_DVI,("'%c' ",c));
   DEBUG_PRINT(DEBUG_DVI,("%d at (%d,%d) tfmw %d", c,
 			 dvi_stack->hh,dvi_stack->vv,ptr?ptr->tfmw:0));
 #endif
   if (currentfont->type==FONT_TYPE_VF) {
-    return(SetVF(c));
+    return(SetVF(ptr));
   } else {
     if (ptr!=NULL && ptr->data == NULL) 
       switch(currentfont->type) {
@@ -111,7 +118,7 @@ dviunits SetChar(int32_t c)
 	Fatal("undefined fonttype %d",currentfont->type);
       }
     if (page_imagep != NULL)
-      return(SetGlyph(c, dvi_stack->hh, dvi_stack->vv));
+      return(SetGlyph(ptr, dvi_stack->hh, dvi_stack->vv));
     else if (ptr!=NULL) {
       /* Expand bounding box if necessary */
       min(x_min,dvi_stack->hh - ptr->xOffset/shrinkfactor);
diff -up dvipng-1.11/dvipng.h.CVE-2010-0829 dvipng-1.11/dvipng.h
--- dvipng-1.11/dvipng.h.CVE-2010-0829	2008-05-05 22:54:50.000000000 +0200
+++ dvipng-1.11/dvipng.h	2010-04-27 13:57:43.643234453 +0200
@@ -387,9 +387,9 @@ void      DrawPages(void);
 void      WriteImage(char*, int);
 void      LoadPK(int32_t, register struct char_entry *);
 int32_t   SetChar(int32_t);
-dviunits  SetGlyph(int32_t c, int32_t hh,int32_t vv);
+dviunits  SetGlyph(struct char_entry *ptr, int32_t hh,int32_t vv);
 void      Gamma(double gamma);
-int32_t   SetVF(int32_t);
+int32_t   SetVF(struct char_entry *ptr);
 int32_t   SetRule(int32_t, int32_t, int32_t, int32_t);
 void      SetSpecial(char *, int32_t, int32_t);
 void      BeginVFMacro(struct font_entry*);
diff -up dvipng-1.11/set.c.CVE-2010-0829 dvipng-1.11/set.c
--- dvipng-1.11/set.c.CVE-2010-0829	2008-02-08 14:45:23.000000000 +0100
+++ dvipng-1.11/set.c	2010-04-27 13:58:16.516377073 +0200
@@ -203,23 +203,13 @@ void Gamma(double gamma)
   }
 }
 
-dviunits SetGlyph(int32_t c, int32_t hh,int32_t vv)
+dviunits SetGlyph(struct char_entry *ptr, int32_t hh, int32_t vv)
 /* gdImageChar can only do monochrome glyphs */
 {
-  register struct char_entry *ptr;
   int dst_alpha,dst_weight,tot_weight,alpha;
   int x,y,pos=0;
   int bgColor,pixelgrey,pixelcolor;
 
-  if (c<0 || c>LASTFNTCHAR) {
-    Warning("glyph index too large (%d), skipping",c);
-    return(0);
-  }
-  ptr=currentfont->chr[c];
-  if (ptr==NULL) {
-    Warning("unable to draw glyph %d, skipping",c);
-    return(0);
-  }
   hh -= ptr->xOffset/shrinkfactor;
   vv -= ptr->yOffset/shrinkfactor;
   /* Initialize persistent color cache. Perhaps this should be in
diff -up dvipng-1.11/vf.c.CVE-2010-0829 dvipng-1.11/vf.c
--- dvipng-1.11/vf.c.CVE-2010-0829	2008-05-05 20:58:00.000000000 +0200
+++ dvipng-1.11/vf.c	2010-04-27 13:57:43.645246655 +0200
@@ -27,11 +27,10 @@
 #define VF_ID 202
 #define LONG_CHAR 242
 
-int32_t SetVF(int32_t c) 
+int32_t SetVF(struct char_entry* ptr) 
 {
   struct font_entry* currentvf;
   unsigned char *command,*end;
-  struct char_entry* ptr=currentfont->chr[c];
 
   currentvf=currentfont;
   BeginVFMacro(currentvf);
